#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define the structure
struct student {
    char name[30];
    char class[10];
    int roll;
};

// Function prototypes
void input();
void display();
void search();
void searchByRoll();
void searchByName();
void modify();
void del();
void flushInput();

// Global size of student struct
long sz = sizeof(struct student);

// Function to flush input buffer
void flushInput() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

// Function to take student input and save to file
void input() {
    struct student s;
    FILE *fp = fopen("stud.txt", "ab");
    if (!fp) {
        printf("Error opening file!\n");
        return;
    }

    printf("Enter Student NAME: ");
    flushInput();
    fgets(s.name, sizeof(s.name), stdin);
    s.name[strcspn(s.name, "\n")] = '\0';

    printf("Enter CLASS: ");
    fgets(s.class, sizeof(s.class), stdin);
    s.class[strcspn(s.class, "\n")] = '\0';

    printf("Enter ROLL: ");
    scanf("%d", &s.roll);

    fwrite(&s, sz, 1, fp);
    printf("Record saved Successfully....\n");

    fclose(fp);
}

// Function to display all student records
void display() {
    struct student s;
    FILE *fp = fopen("stud.txt", "rb");
    if (!fp) {
        printf("No records found.\n");
        return;
    }

    printf("\n<== All Students ==>\n");
    printf("%-30s %-20s %-10s\n", "Name", "Class", "Roll");
    printf("------------------------------------------------------------\n");

    while (fread(&s, sz, 1, fp) == 1) {
        printf("%-30s %-20s %-10d\n", s.name, s.class, s.roll);
    }

    fclose(fp);
}

// Function to search menu
void search() {
    int ch;
    while (1) {
        printf("\n<== Search Menu ==>\n");
        printf("1. Search by ROLL\n");
        printf("2. Search by NAME\n");
        printf("0. Back to Main Menu\n");
        printf("Enter your Choice: ");
        scanf("%d", &ch);

        switch (ch) {
            case 0:
                return;
            case 1:
                searchByRoll();
                break;
            case 2:
                searchByName();
                break;
            default:
                printf("Invalid Choice.\n");
        }
    }
}

// Search by roll number
void searchByRoll() {
    int roll, found = 0;
    struct student s;
    FILE *fp = fopen("stud.txt", "rb");
    if (!fp) {
        printf("No records found.\n");
        return;
    }

    printf("Enter ROLL to search: ");
    scanf("%d", &roll);

    while (fread(&s, sz, 1, fp) == 1) {
        if (roll == s.roll) {
            printf("\n%-30s %-20s %-10s\n", "Name", "Class", "Roll");
            printf("%-30s %-20s %-10d\n", s.name, s.class, s.roll);
            found = 1;
            break;
        }
    }

    fclose(fp);
    if (!found)
        printf("Record not FOUND\n");
    else
        printf("Record found Successfully.\n");
}

// Search by name
void searchByName() {
    char name[30];
    int found = 0;
    struct student s;
    FILE *fp = fopen("stud.txt", "rb");
    if (!fp) {
        printf("No records found.\n");
        return;
    }

    printf("Enter NAME to search: ");
    flushInput();
    fgets(name, sizeof(name), stdin);
    name[strcspn(name, "\n")] = '\0';

    while (fread(&s, sz, 1, fp) == 1) {
        if (strcmp(name, s.name) == 0) {
            printf("\n%-30s %-20s %-10s\n", "Name", "Class", "Roll");
            printf("%-30s %-20s %-10d\n", s.name, s.class, s.roll);
            found = 1;
            break;
        }
    }

    fclose(fp);
    if (!found)
        printf("Record not FOUND\n");
    else
        printf("Record found Successfully.\n");
}

// Modify student record
void modify() {
    int roll, found = 0;
    struct student s;
    FILE *fp = fopen("stud.txt", "rb+");
    if (!fp) {
        printf("No records found.\n");
        return;
    }

    printf("Enter ROLL to modify: ");
    scanf("%d", &roll);

    while (fread(&s, sz, 1, fp) == 1) {
        if (s.roll == roll) {
            found = 1;
            printf("Enter New NAME: ");
            flushInput();
            fgets(s.name, sizeof(s.name), stdin);
            s.name[strcspn(s.name, "\n")] = '\0';

            printf("Enter New CLASS: ");
            fgets(s.class, sizeof(s.class), stdin);
            s.class[strcspn(s.class, "\n")] = '\0';

            printf("Enter New ROLL: ");
            scanf("%d", &s.roll);

            fseek(fp, -sz, SEEK_CUR);
            fwrite(&s, sz, 1, fp);
            printf("Record Modified Successfully.\n");
            break;
        }
    }

    fclose(fp);
    if (!found)
        printf("Record not FOUND\n");
}

// Delete a student record
void del() {
    int roll, found = 0;
    struct student s;
    FILE *fp = fopen("stud.txt", "rb");
    FILE *temp = fopen("temp.txt", "wb");

    if (!fp || !temp) {
        printf("Error opening file!\n");
        return;
    }

    printf("Enter ROLL to delete: ");
    scanf("%d", &roll);

    while (fread(&s, sz, 1, fp) == 1) {
        if (s.roll == roll) {
            found = 1;
            continue; // Skip writing this record
        }
        fwrite(&s, sz, 1, temp);
    }

    fclose(fp);
    fclose(temp);

    remove("stud.txt");
    rename("temp.txt", "stud.txt");

    if (!found)
        printf("Record not FOUND\n");
    else
        printf("Record Deleted Successfully.\n");
}

// Main function with menu
int main() {
    int ch;
    while (1) {
        printf("\n<== School Management System ==>\n");
        printf("1. Take Admission\n");
        printf("2. Display All Students\n");
        printf("3. Search\n");
        printf("4. Modify\n");
        printf("5. Delete\n");
        printf("0. Exit\n");
        printf("Enter your Choice: ");
        scanf("%d", &ch);

        switch (ch) {
            case 0:
                printf("Exiting Program...\n");
                exit(0);
            case 1:
                input();
                break;
            case 2:
                display();
                break;
            case 3:
                search();
                break;
            case 4:
                modify();
                break;
            case 5:
                del();
                break;
            default:
                printf("Invalid Choice. Try again.\n");
        }

        printf("\nPress Enter to continue...");
        flushInput();
        getchar();
    }

    return 0;
}
